type Query {
    fetchAllProfessors:[Professor]
    fetchProfessorById(professorAiid:Int!):Professor
    fetchProfessorByName(fullName:String!):[Professor]

    fetchAllStudents:[Student]
    fetchStudentById(studentAiid:Int!):Student
    fetchStudentByName(fullName:String!):[Student]

    fetchAllTodos:[Todo]
    fetchTodoById(todoAiid:Int!):Todo
}

type Mutation {
    addStudent(student : StudentInput): Student
    addProfessor(Professor : ProfessorInput): Professor
#    addTodo(Todo : TodoInput): Todo
}

input ProfessorInput {
    professorAiid : ID
    fullName : String
    email : String
    phone : String
}

input StudentInput {
    studentAiid : ID
    fullName : String
    email : String
    phone : String
    todos : [TodoInput]
}

input TodoInput {
    todoAiid : ID
    description : String
#    professor : ProfessorInput
}

type Professor {
    professorAiid : ID
    fullName : String
    email : String
    phone : String,
}

type Student {
    studentAiid : ID
    fullName : String
    email : String
    phone : String,
    todos : [Todo]
}

type Todo {
    todoAiid : ID,
    description : String
    professor : Professor
}
