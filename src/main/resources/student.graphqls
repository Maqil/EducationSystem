type Query {
    fetchAllProfessors:[Professor]
    fetchProfessorById(professorAiid:Int!):Professor
    fetchProfessorByName(fullName:String!):[Professor]

    fetchAllTodos:[Todo]
    fetchTodoById(todoAiid:Int!):Todo

    fetchAllStudents:[Student]
    fetchStudentById(studentAiid:Int!):Student
    fetchStudentByName(fullName:String!):[Student]

    fetchAllGrades:[Grade]
    fetchGradeById(GradeAiid:Int!):Grade

    fetchAllSubjects:[Subject]
    fetchSubjectById(subjectAiid:Int!):Subject
    fetchSubjectByName(name:String!):[Subject]

#    fetchAllStudentGradeSubjects:[StudentGradeSubject]
#    fetchSubjectById(studentAiid:Int!):StudentGradeSubject

    fetchAllStdGrdSbjTds:[StdGrdSbjTd]
    fetchStdGrdSbjTdById(stdGrdSbjTdAiid:Int!):StdGrdSbjTd
}

type Professor {
    professorAiid : ID
    fullName : String
    email : String
    phone : String
    todos : [Todo]
}

type Todo {
    todoAiid : ID,
    description : String
    professor : Professor
}

type Student {
    studentAiid : ID
    fullName : String
    email : String
    phone : String
    registrations : [StudentGrade]
}

type Grade {
    gradeAiid : ID
}

type StudentGrade {
    stdGradeAiid : ID
}

type Subject {
    subjectAiid : ID
    subjectName : String
}

type StdGrdSbjTd {
    stdGrdSbjTdAiid : ID
    todo : Todo
    stdGradeSubject : StudentGradeSubject
}

type StudentGradeSubject {
    stdGradeSubjectAiid : ID
}

#type Mutation {
#    addStudent(student : StudentInput): Student
#    addProfessor(Professor : ProfessorInput): Professor
##    addTodo(Todo : TodoInput): Todo
#}
#
#input ProfessorInput {
#    professorAiid : ID
#    fullName : String
#    email : String
#    phone : String
#}
#
#input StudentInput {
#    studentAiid : ID
#    fullName : String
#    email : String
#    phone : String
#    todos : [TodoInput]
#}
#
#input TodoInput {
#    todoAiid : ID
#    description : String
##    professor : ProfessorInput
#}

